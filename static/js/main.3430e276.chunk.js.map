{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["getData","url","fetch","then","response","json","TodoList","state","todos","input","select","handleChange","event","value","target","setState","handleSelectChange","getPreparedTodos","inputCase","toLowerCase","preparedTodos","filter","todo","title","includes","completed","a","todosFromServer","this","className","htmlFor","type","name","id","onChange","map","classNames","checked","userId","props","onClick","selectUser","React","Component","CurrentUser","user","loadUser","prevProps","removeUser","email","phone","style","color","App","selectedUserId","handleClear","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3430e276.chunk.js","sourcesContent":["const API_URL = 'https://mate.academy/students-api/';\n\nconst getData = (url: string) => {\n  return fetch(`${API_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport const getAllTodos = (): Promise<Todo[]> => getData('todos');\n\nexport const getUser = (userId: number): Promise<User> => getData(`users/${userId}`);\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { getAllTodos } from '../../api';\n\ntype Props = {\n  selectUser: (userId: number) => void,\n  userId: number,\n};\ntype State = {\n  todos: Todo[],\n  input: string,\n  select: string,\n};\n\nexport class TodoList extends React.Component <Props, State> {\n  state: State = {\n    todos: [],\n    input: '',\n    select: '',\n  };\n\n  async componentDidMount() {\n    const todosFromServer = await getAllTodos();\n\n    this.setState({\n      todos: todosFromServer,\n    });\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      input: value,\n    });\n  };\n\n  handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      select: value,\n    });\n  };\n\n  getPreparedTodos = () => {\n    const { todos, input, select } = this.state;\n    const inputCase = input.toLowerCase();\n\n    let preparedTodos = [...todos];\n\n    if (input) {\n      preparedTodos = todos.filter(todo => todo.title.toLowerCase().includes(inputCase));\n    }\n\n    switch (select) {\n      case 'completed':\n        return preparedTodos.filter(todo => todo.completed);\n      case 'not':\n        return preparedTodos.filter(todo => !todo.completed);\n      default:\n        return preparedTodos;\n    }\n  };\n\n  render() {\n    const { input, select } = this.state;\n    const preparedTodos = this.getPreparedTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <label htmlFor=\"input\">\n          Filter by Title:\n          {' '}\n          <input\n            type=\"text\"\n            name=\"input\"\n            id=\"input\"\n            value={input}\n            onChange={this.handleChange}\n          />\n          {'  '}\n          <select\n            name=\"select\"\n            value={select}\n            onChange={this.handleSelectChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"not\">Not completed</option>\n          </select>\n        </label>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {preparedTodos.map(todo => (\n              <li\n                className={classNames('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n                key={todo.id}\n              >\n                <label htmlFor={`${todo.id}`}>\n                  <input\n                    type=\"checkbox\"\n                    id={`${todo.id}`}\n                    checked={todo.completed}\n\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    { 'TodoList__user- button--selected': todo.userId === this.props.userId },\n                  )}\n                  type=\"button\"\n                  onClick={() => this.props.selectUser(todo.userId)}\n                >\n                  User #\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number,\n  removeUser: () => void;\n};\n\ntype State = {\n  user: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    const user: User = await getUser(this.props.userId);\n\n    this.setState({\n      user,\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { removeUser } = this.props;\n\n    return (\n      <>\n        { user ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {user.id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">\n              {user.email}\n            </p>\n            <p className=\"CurrentUser__phone\">\n              {user.phone}\n            </p>\n            <button\n              type=\"button\"\n              onClick={removeUser}\n            >\n              Clear\n            </button>\n          </div>\n        )\n          : <p style={{ color: 'red' }}> User not found </p>}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  selectUser = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  handleClear = () => {\n    this.selectUser(0);\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectUser={this.selectUser}\n            userId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                removeUser={this.handleClear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}